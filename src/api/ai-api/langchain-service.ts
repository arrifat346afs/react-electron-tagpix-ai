import { GoogleGenerativeAI } from '@google/generative-ai';
import {createMistral } from '@ai-sdk/mistral';
import type { ProcessingSettings } from "@/services/batch-processing/types";
import type { AIAnalysisResult } from "./index";

export class AIService {
  private model: GoogleGenerativeAI | ReturnType<typeof createMistral>;

  constructor(settings: ProcessingSettings) {
    if (settings.api.provider === "Google") {
      this.model = new GoogleGenerativeAI(settings.api.apiKey);
    } else {
      this.model = createMistral({
        apiKey: settings.api.apiKey
      });
    }
  }

  private parseAIResponse(response: string): AIAnalysisResult {
    const lines = response.split("\n");
    let title = "";
    let description = "";
    let keywords: string[] = [];

    for (const line of lines) {
      if (line.startsWith("1.") || line.toLowerCase().includes("title:")) {
        title = line.replace(/^1\.\s*|title:\s*/i, "").trim();
      } else if (
        line.startsWith("2.") ||
        line.toLowerCase().includes("description:")
      ) {
        description = line.replace(/^2\.\s*|description:\s*/i, "").trim();
      } else if (
        line.startsWith("3.") ||
        line.toLowerCase().includes("keywords:")
      ) {
        const keywordText = line.replace(/^3\.\s*|keywords:\s*/i, "").trim();
        keywords = keywordText
          .split(",")
          .map((k) => k.trim())
          .filter((k) => k.length > 0);
      }
    }

    return { title, description, keywords };
  }

  async analyzeImage(
    imageBase64: string,
    settings: ProcessingSettings
  ): Promise<AIAnalysisResult> {
    const imageSizeInMB = (imageBase64.length * 3) / 4 / (1024 * 1024);
    if (imageSizeInMB > 4) {
      throw new Error("Image exceeds 4MB limit. Please use a smaller image.");
    }

    console.log(`Sending image to AI model (${imageSizeInMB.toFixed(2)}MB)`);

    const prompt = `Please analyze this image and generate:
        1. A title (maximum ${settings.metadata.titleLimit} characters)
        2. A description (maximum ${settings.metadata.descriptionLimit} characters)
        3. Up to ${settings.metadata.keywordLimit} relevant keywords

        Please format the response exactly as:
        Title: [Main Subject] [Descriptive Detail] [Engaging, Natural Hook that Highlights Beauty or Emotion]
        Description: [your description]
        Keywords: [comma-separated keywords]`;

    try {
      let response: string;

      if (settings.api.provider === "Google") {
        const gemini = this.model as GoogleGenerativeAI;
        const genModel = gemini.getGenerativeModel({ model: settings.api.model });
        
        const result = await genModel.generateContent([
          prompt,
          {
            inlineData: {
              mimeType: "image/jpeg",
              data: imageBase64
            }
          }
        ]);
        
        response = result.response.text();
      } else {
        const mistral = this.model as ReturnType<typeof createMistral>;
        const result = await mistral.images.generate({
          model: settings.api.model,
          prompt: prompt,
          image: `data:image/jpeg;base64,${imageBase64}`
        });
        
        response = result.text;
      }

      if (!response?.trim()) {
        throw new Error('Empty response from AI API');
      }

      const result = this.parseAIResponse(response);
      
      if (!result.title || !result.description || !result.keywords.length) {
        throw new Error('Incomplete metadata generated by AI API');
      }

      return result;
    } catch (error) {
      console.error('AI API error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`AI API error: ${errorMessage}`);
    }
  }
}
